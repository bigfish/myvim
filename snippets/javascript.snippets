# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2}) {
		${3}
	}
#anonymous function
snippet af
	function (${1}) {
		${2}
	}
# function template + trigger to expand doc comment
snippet f
	function ${1:function_name}(${2:argument}):${3:return} { em${4}
		<++>
	}
# method template (function assigned to property)
snippet m
	${1:method_name} : function (${2:argument}):${3:return} { em${4}
		<++>
	},

#execute ExtMethod command
snippet em
	`JSExtMethod()`
#Ext Property template
snippet p
	${1:prop_name}:${2:prop_type} : ${3:default_value}, ep${4}
	<++>

#execute ExtProperty command
snippet ep
	`JSExtProperty()`

#Ext Var template
snippet v
	var ${1:prop_name}:${2:prop_type} = ${3:default_value}; ev${4}
	<++>

#execute ExtVar command
snippet ev
	`JSExtVar()`

# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
snippet el
	else {
		${1}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}

snippet log
	console.log(${1})

#jslint comment
snippet jslint
	/*jslint white: true, browser: true, devel: true, onevar: false, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true */

snippet globals
	/*global window: false */

#YUI Test assertions
snippet areEqual
	Y.Assert.areEqual("${1:expected value}", "${2:actual value}", "${3:Asserts that a value is equal to another. This uses the double equals sign so type coercion may occur.}");

snippet areNotEqual
	Y.Assert.areNotEqual("${1:expected value}", "${2:actual value}", "${3:Asserts that a value is not equal to another. This uses the double equals sign so type coercion may occur.}");

snippet areSame
	Y.Assert.areSame("${1:expected value}", "${2:actual value}", "${3:Asserts that a value is the same as another. This uses the triple equals sign so no type coercion may occur.}");

snippet areNotSame
	Y.Assert.areNotSame("${1:expected value}", "${2:actual value}", "${3:Asserts that a value is not the same as another. This uses the triple equals sign so no type coercion may occur.}");

snippet fail
	Y.Assert.fail("${1:Forces an assertion error to occur.}");

#snippet fail
#	Y.fail("${1:Forces an assertion error to occur.}");
snippet isArray
	Y.Assert.isArray("${1:item to test}", "${2:Asserts that a value is an array.}");

snippet isBoolean
	Y.Assert.isBoolean("${1:item to test}", "${2:Asserts that a value is a Boolean.}");

snippet isFunction
	Y.Assert.isFunction("${1:item to test}", "${2:Asserts that a value is a function.}");

snippet isInstanceOf
	Y.Assert.isInstanceOf("${1:item to test}", "${2:Asserts that a value is an instance of a particular object.}");

snippet isNumber
	Y.Assert.isNumber("${1:item to test}", "${2:Asserts that a value is a number.}");

snippet isObject
	Y.Assert.isObject("${1:item to test}", "${2:Asserts that a value is an object.}");

snippet isString
	Y.Assert.isString("${1:item to test}", "${2:Asserts that a value is a string.}");

snippet isTypeOf
	Y.Assert.isTypeOf("${1:expected type}", "${2:actual value}", "${3:	Asserts that a value is of a particular type.}");

snippet isUndefined
	Y.Assert.isUndefined("${1:item to test}", "${2:Asserts that a value is undefined. This uses the triple equals sign so no type coercion may occur.}");

snippet isNaN
	Y.Assert.isNaN("${1:item to test}", "${2:Asserts that a value is not a number.}");

snippet isNotNaN
	Y.Assert.isNotNaN("${1:item to test}", "${2:Asserts that a value is not the special NaN value.}");

snippet isNotNull
	Y.Assert.isNotNull("${1:item to test}", "${2: Asserts that a value is not null. This uses the triple equals sign so no type coercion may occur.}");

snippet isNotUndefined
	Y.Assert.isNotUndefined("${1:item to test}", "${2:Asserts that a value is not undefined. This uses the triple equals sign so no type coercion may occur.}");

snippet isNull
	Y.Assert.isNull("${1:item to test}", "${2:Asserts that a value is null. This uses the triple equals sign so no type coercion may occur.}");

snippet isFalse
	Y.Assert.isFalse("${1:value}", "${2:Asserts that a value is false. This uses the triple equals sign so no type coercion may occur.}");

snippet isTrue
	Y.Assert.isTrue("${1:value}", "${2:Asserts that a value is true. This uses the triple equals sign so no type coercion may occur.}");
