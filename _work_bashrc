# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned

# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

############################################# PERSONAL #########################################
source /usr/share/autojump/autojump.sh
################## ALIASES ###########################
alias ga='git add'
alias gp='git push'
alias gps='git push'
alias gl='git log --author="^(?!svcacct-concbrms).*$" --perl-regexp'
alias gs='git status'
alias gd='git diff'
alias gdn='git diff --name-only'
alias gdc='git diff --cached'
alias gc='git commit'
alias gcm='git commit -m'
alias gca='git commit -a'
alias gcam='git commit -am'
alias gb='git branch'
alias gco='git checkout'
alias gpl='git pull --rebase'
alias gpr='git pull --rebase'
alias gcl='git clone'
alias grs='git reset --hard HEAD'
alias ks='ls -lhFGv'
alias cls=clear
alias ff="firefox &>/dev/null &"
export NODE_PATH=/usr/local/lib/node_modules
export EDITOR=vim
export PAGER=less
export LTHOME=~/LightTable
export PATH=$PATH:$LTHOME
alias lt="nohup LightTable &> /dev/null"

#enable 256 colors in vim
[ -z "$TMUX" ] && export TERM=xterm-256color

#prevent flow control
stty -ixon
stty stop ''
stty start ''
#RVM (ruby version manager)
#source ~/.rvm/scripts/rvm
#tmuxinator
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

alias vi=vim
alias chat="weechat-curses irc://exinda-mvnrepo.wat.exinda.com"
alias apti="sudo apt-get install"
alias repache='sudo apache2ctl restart'
alias rebash=". ~/.bashrc"
alias psa="ps aux | grep"
alias dev="bundle exec guard"
alias msyql="mysql"
alias my="mysql -uroot -pexinda -hlocalhost"
alias phpi="sudo vim /etc/php5/apache2/php.ini"
alias alog="tail -f /var/log/apache2/error.log"
alias hosts="sudo vim /etc/hosts"
alias ack="ack-grep"
alias gdc="git svn dcommit"
alias remap="xmodmap ~/.Xmodmap"
#LESS COLORS
export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
#CONFIGURE PATH
export PATH=$HOME/bin:$PATH
export PATH=$HOME/google_appengine:$PATH
export LESS=' -R '
export CUCUMBER_BROWSER=chrome
export CLOJURESCRIPT_HOME=$HOME/clojure/clojurescript

#export WSS_BRANCH=msc
export WSS_BRANCH=cdc
export WSS_HOME=$HOME/work/$WSS_BRANCH

export MSC_HOME=$WSS_HOME/SecurityCenter
export MSC_SCRIPT_HOME=$WSS_HOME/SecurityCenter/src/ScriptUI/McMain
export MSC_TEST=$MSC_HOME/ui_test
export MSC_SPEC=$MSC_TEST/spec
export MSC_MOCK=$MSC_TEST/mock

export NEOVIM_JS_DEBUG=$HOME/.nvjslog

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

#export PS1="\[\033[00m\]\u@\h\[\033[01;34m\] \w \[\033[31m\]\$(parse_git_branch) \[\033[00m\]$\[\033[00m\] "

#export PS1="\\[$(tput setaf 7)\\]\[\e[0;31m\]\\h\[\e[0;31m\]\[\e[m\] \[\e[0;33m\]\\w\[\e[0;33m\]\[\e[m\] \[\e[0;32m\]\$(parse_git_branch)\[\e[0;32m\]\[\e[m\]\n\[\e[1;32m\]>: \[\e[1;32m\]\\[$(tput sgr0)\\]"
export PS1="\\[$(tput setaf 7)\\]\[\e[0;33m\]\\w\[\e[0;33m\]\[\e[m\]\[\e[0;32m\]\$(parse_git_branch)\[\e[0;32m\]\[\e[m\]\[\e[1;32m\] >: \[\e[1;32m\]\\[$(tput sgr0)\\]"

PHANTOMJS=$HOME/phantomjs
export PATH=$PHANTOMJS/bin:$PATH

#export PATH=$PATH:/opt/less/bin
#export NODE_PATH=$NODE_PATH:/opt/less/lib

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
#use latest node by default
nvm use 5.1.1 &> /dev/null

set -o emacs

export PATH=$PATH:/home/david/clojure/clojure-1.5.1
export RUBYDB_OPTS="HOST=localhost PORT=9000"
alias ruby_debug="ruby -I$RUBYDB_LIB -r $RUBYDB_LIB/rdbgp.rb"
alias dv="setxkbmap dvorak"
alias us="setxkbmap us"
alias nf="noflo"
alias at="tmux attach -t"
alias tm="tmux new-session -s"
alias tl="tmux list-sessions"
alias dos="unix2dos"
### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
#now using ergodox
#xmodmap ~/.Xmodmap
export NODE_ENV=local

export SVN_SSH="ssh -i /home/david/work/.ssh/id_rsa -l svnuser"
